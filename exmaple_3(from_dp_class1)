#include<bits/stdc++.h>
using namespace std;

int n;
int t[1001];
int s[1001];
int X,K;
int dp[101][101][101];

int rec(int level, int time_taken, int item_taken){
    // pruning
    // base case
    if(level==n){
        return 0;
        }
    // cashe check
    if(dp[level][time_taken][item_taken] != -1){
        return dp[level][time_taken][item_taken];
    }
    // transition
    int ans = rec(level+1,time_taken,item_taken);
    if(time_taken+t[level] <= X && item_taken+1<=K){
        ans = max(ans,rec(level+1,time_taken+t[level],item_taken+1)+s[level]);
    }
    // save and return 
    return dp[level][time_taken][item_taken] = ans;
}

void solve(){
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>t[i];
    }
    for(int i=0;i<n;i++){
        cin>>s[i];
    }
    cin>>X>>K;
    memset(dp,-1,sizeof(dp));
    cout<<rec(0,X,K)<<'\n';
}

int main(){
    solve();
}
