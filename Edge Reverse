Description
Given a directed graph with 
N
N vertices and 
M
M edges.

What is the minimum number of edges needed to reverse in order to have at least one path from vertex 
1
1 to vertex 
N
N, where the vertices are numbered from 
1
1 to 
N
N ?

Input Format
The first line contains 
T
T - the number of test cases.


The first line of each test case contains two space-separated integers 
N
N and 
M
M, denoting the number of vertices and the number of edges in the graph respectively.
The 
i
t
h
i 
th
  line of the next 
M
M lines of each test case contains two space-separated integers 
X
i
X 
i
​
  and 
Y
i
Y 
i
​
 , denoting that the 
i
t
h
i 
th
  edge connects vertices from 
X
i
X 
i
​
  to 
Y
i
Y 
i
​
 .

Output Format
For each test case, In a single line, print the minimum number of edges we need to revert. If there is no way of having at least one path from 
1
1 to 
N
N, print -1.

Constraints
1
≤
T
≤
10
1≤T≤10
1
≤
N
,
M
≤
1
0
5
1≤N,M≤10 
5
 
1 ≤ 
X
i
X 
i
​
 , 
Y
i
Y 
i
​
  ≤ 
N
N
There can be multiple edges connecting the same pair of vertices, There can be self-loops too i.e. 
X
i
X 
i
​
  = 
Y
i
Y 
i
​
 

Sample Input 1
1
7 7
1 2 
3 2
3 4
7 4
6 2
5 6
7 5
Sample Output 1
2
Note
We can consider two paths from 1 to 7:


1
−
2
−
3
−
4
−
7
1−2−3−4−7
1
−
2
−
6
−
5
−
7
1−2−6−5−7


In the first one we need to revert edges 
(
3
−
2
)
,
(
7
−
4
)
(3−2),(7−4). In the second one - 
(
6
−
2
)
,
(
5
−
6
)
,
(
7
−
5
)
(6−2),(5−6),(7−5). So the answer is 
m
i
n
(
2
,
3
)
=
2
min(2,3)=2.


////////////////////////////////////////////       code       ///////////////////////////////////////////////////

#include <bits/stdc++.h>
using namespace std;
int n, m;
vector<vector<pair<int, int>>> g;
vector<int> dist;

void bfs(int node){
    deque<pair<int, int>> dq;
    dist[node] = 0;
    dq.push_back({node, 0});

    while (!dq.empty()){
        int node1 = dq.front().first;
        int w = dq.front().second;
        dq.pop_front();

        for (auto [v, w] : g[node1]) { 
            if (dist[v] > dist[node1] + w) { 
                dist[v] = dist[node1] + w;
                if (w == 0) {
                    dq.push_front({v, w});
                } else {
                    dq.push_back({v, w});
                }
            }
        }
    }
    if (dist[n] == 1e9) cout << -1 << endl;
    else cout << dist[n] << endl;
}

void solve() {
    cin >> n >> m;
    g.assign(n + 1, vector<pair<int, int>>());
    dist.assign(n + 1, 1e9); 

    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        g[a].push_back({b, 0});
        g[b].push_back({a, 1});
    }
    bfs(1);
}

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
