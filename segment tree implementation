#include <bits/stdc++.h>
using namespace std;

int n;
int arr[10010];
int t[40040];

// Build segment tree
void build(int index, int L, int R){
    if (L == R) {
        t[index] = arr[L];
        return;
    }
    int mid = (L + R) / 2;
    build(index * 2, L, mid);
    build(index * 2 + 1, mid + 1, R);
    t[index] = t[index * 2] + t[index * 2 + 1];
}

// Point update at position `pos` with value `val`
void update(int index, int L, int R, int pos, int val){
    if (pos < L || pos > R) return;
    if (L == R) {
        t[index] = val;
        arr[L] = val;
        return;
    }
    int mid = (L + R) / 2;
    update(index * 2, L, mid, pos, val);
    update(index * 2 + 1, mid + 1, R, pos, val);
    t[index] = t[index * 2] + t[index * 2 + 1];
}

// Range sum query from `l` to `r`
int sum_query(int index, int L, int R, int l, int r){
    if (r < L || l > R) return 0; // completely outside
    if (l <= L && R <= r) return t[index]; // completely inside

    int mid = (L + R) / 2;
    return sum_query(index * 2, L, mid, l, r) + sum_query(index * 2 + 1, mid + 1, R, l, r);
}

void solve(){
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    build(1, 0, n - 1);

    int q;
    cin >> q;
    while (q--) {
        int ch;
        cin >> ch;
        if (ch == 1) {
            int x, v;
            cin >> x >> v;
            update(1, 0, n - 1, x, v);
        } else {
            int l, r;
            cin >> l >> r;
            cout << sum_query(1, 0, n - 1, l, r) << endl;
        }
    }
}

int main(){
    solve();
    return 0;
}
