#include<bits/stdc++.h>
using namespace std;
int n;
int arr[10010];
int dp[10010];

int rec(int level){
    // best LIS ending at this level
    // pruning
    if(level<0)return 0;
    // base case
    // cache checkk
    if(dp[level] != -1){
        return dp[level];
    }
    // transition/ campute
    int ans = 1;
    for(int pre_taken=0;pre_taken<level;pre_taken++){
        if(arr[pre_taken]<arr[level]){
            ans = max(ans, 1+rec(pre_taken));
        }
    }
    // save and return 
    return dp[level] = ans;
}

void solve(){
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    memset(dp,-1,sizeof(dp));
    int best = 0;
    for(int i=0;i<n;i++){
        best = max(best,rec(i));
    }
    cout<<endl;
}

int main(){
    int t=1;
    for(int i=0;i<t;i++){
        solve();
    }
}

////////////////////  here time complecxity is o(n^2)   we have better solution for this question but we are learning the form 2 that why we write this code      ///////////////////////////

