#include <bits/stdc++.h>
using namespace std;

// graph[i] contains all neighbors of node i (max 2^20 possible states)
vector<int> graph[(1 << 20)];

// ban[i] = true means node i is blocked (forbidden)
bool ban[(1 << 20)];

// Converts a 20-bit binary string to an integer value
int getval(string s) {
    int stval = 0;
    for (int i = 0; i < 20; i++) {
        if (s[19 - i] == '1') {
            stval |= (1 << i);
        }
    }
    return stval;
}

// Adds an undirected edge between a and b if both are not banned
void add_edge(int a, int b) {
    if (!ban[a] && !ban[b]) {
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
}

vector<int> vis(1 << 20, 0);        
vector<int> dist(1 << 20, INT_MAX);   
void bfs(int st) {
    queue<int> q;
    dist[st] = 0;
    q.push(st);

    while (!q.empty()) {
        int cur = q.front();
        q.pop();

        if (vis[cur]) continue;
        vis[cur] = 1;

        for (int v : graph[cur]) {
            if (dist[v] > dist[cur] + 1) {
                dist[v] = dist[cur] + 1;
                q.push(v);
            }
        }
    }
}
// --- End BFS Section ---

int main() {
    string s;
    cin >> s;
    int stval = getval(s);
    string en;
    cin >> en;
    int enval = getval(en);

    int k;
    cin >> k;
    for (int i = 0; i < k; i++) {
        string temp;
        cin >> temp;
        ban[getval(temp)] = 1;
    }

    // Build the graph with 1-bit flips
    for (int i = 0; i < (1 << 20); i++) {
        for (int j = 0; j < 20; j++) {
            add_edge(i, i ^ (1 << j));
        }
    }

    // Run BFS from start
    bfs(stval);

    if (dist[enval] == INT_MAX)
        cout << -1 << endl;
    else
        cout << dist[enval] << endl;
    return 0;
}
