Description
Monkey D. Luffy, on his journey of becoming the "King of Pirates" and to conquer the "One Piece", wants to travel across the Grand Line. Grand Line is a mysterious sea, and is in the shape of a 
N
∗
M
N∗M grid 
S
S with each cell denoting the wind direction. The sign of 
S
[
i
]
[
j
]
S[i][j] can be:

1
1 which means wind in the cell flows to the right. (i.e from 
S
[
i
]
[
j
]
S[i][j] to 
S
[
i
]
[
j
+
1
]
S[i][j+1])
2
2 which means wind in the cell flows to the left. (i.e from 
S
[
i
]
[
j
]
S[i][j] to 
S
[
i
]
[
j
−
1
]
S[i][j−1])
3
3 which means wind in the cell flows downwards. (i.e from 
S
[
i
]
[
j
]
S[i][j] to 
S
[
i
+
1
]
[
j
]
S[i+1][j])
4
4 which means wind in the cell flows upwards. (i.e from 
S
[
i
]
[
j
]
S[i][j] to 
S
[
i
−
1
]
[
j
]
S[i−1][j])
Notice that there could be some signs on the cells of the grid 
S
S that point outside the Grand Line sea grid.

Luffy's ship "Merry" can only sail along the wind direction and can't go outside the Grand Line sea grid 
S
S at any point.
Luffy can also modify the wind's direction on a cell with 
c
o
s
t
=
1
cost=1. ( can modify the sign on a cell one time only )
Find the minimum cost to make Luffy's Voyage from the top left corner of the Grand line i.e 
S
[
1
]
[
1
]
S[1][1] to its bottom right corner i.e 
S
[
N
]
[
M
]
S[N][M] possible.

Input Format
Input is given from Standard Input in the following format:


N
N  
M
M
S
1
,
1
S 
1,1
​
  . . . 
S
1
,
M
S 
1,M
​
 
:
:
S
N
,
1
S 
N,1
​
  . . . 
S
N
,
M
S 
N,M
​
 

Output Format
Print the answer.

Constraints
2
≤
N
,
M
≤
1000
2≤N,M≤1000
N
N and 
M
M are integers.
1 ≤ 
S
i
,
j
S 
i,j
​
  ≤ 4.

Sample Input 1
4 4
1 1 1 1
2 2 2 2
1 1 1 1
2 2 2 2 
Sample Output 1
3
Sample Input 2
3 3
1 1 3
3 2 2
1 1 4
Sample Output 2
0
Note
For Sample 1, You will start at point 
(
0
,
0
)
(0,0).
The path to 
(
3
,
3
)
(3,3) is as follows. 
(
0
,
0
)
(0,0) --> 
(
0
,
1
)
(0,1) -->
(
0
,
2
)
(0,2) --> 
(
0
,
3
)
(0,3) change the arrow to down with 
c
o
s
t
=
1
cost=1 --> 
(
1
,
3
)
(1,3) --> 
(
1
,
2
)
(1,2) --> 
(
1
,
1
)
(1,1) --> 
(
1
,
0
)
(1,0) change the arrow to down with 
c
o
s
t
=
1
cost=1 --> 
(
2
,
0
)
(2,0) --> 
(
2
,
1
)
(2,1) --> 
(
2
,
2
)
(2,2) --> 
(
2
,
3
)
(2,3) change the arrow to down with 
c
o
s
t
=
1
cost=1 --> 
(
3
,
3
)
(3,3)
The total cost = 3.


  ///////////////////////////////////////////      code        ////////////////////////////////////////////

  #include <bits/stdc++.h>
using namespace std;

vector<vector<int>> arr;
vector<vector<int>> dist;
int n, m;

void bfs(int a, int b) {
    deque<pair<int, int>> dq;
    dist[a][b] = 0;
    dq.push_back({a, b});

    int dx[4] = {0,0,1,-1};
    int dy[4] = {1,-1,0,0};

    while (!dq.empty()) {
        int x = dq.front().first; 
        int y = dq.front().second;
        dq.pop_front();

        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx >= 1 && nx <= n && ny >= 1 && ny <= m) {
                int w = ((i + 1) == arr[x][y]) ? 0 : 1; 

                if (dist[nx][ny] > dist[x][y] + w) { 
                    dist[nx][ny] = dist[x][y] + w;
                    if (w == 0) {
                        dq.push_front({nx, ny});
                    } else {
                        dq.push_back({nx, ny});
                    }
                }
            }
        }
    }
    cout << dist[n][m] << endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;
    arr.resize(n + 1, vector<int>(m + 1)); 
    dist.assign(n + 1, vector<int>(m + 1, 1e9));

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            cin >> arr[i][j];
        }
    }

    bfs(1, 1);
    return 0;
}
