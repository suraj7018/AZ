#include<bits/stdc++.h>
using namespace std;

int n;
int w[3000];
int v[3000];
int W;
int dp[3003][3003];

int rec(int level, int wleft){
    // pruning
    // base case
    if(level==n){
        return 0;
    }
    // cashe check
    if(dp[level][wleft] != -1){
        return dp[level][wleft];
    }
    // transition
    int ans = rec(level+1,wleft);
    if(w[i]<= wleft){
        ans = max(ans, rec(level+1,wleft-w[level])+v[level]);
    }
    // save and return 
    return dp[level][wleft] = ans;
}

void solve(){
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>w[i];
    }
    for(int i=0;i<n;i++){
        cin>>v[i];
    }
    cin>>W;
    memset(dp,-1,sizeof(dp));
    cout<<rec(0,W)<<'\n';
}

int main(){
    sovle();
}




////////////  this is code with printing the element index which include in the our answer //////////////////////


#include<bits/stdc++.h>
using namespace std;

int n;
int w[3000];
int v[3000];
int W;
int dp[3003][3003];

int rec(int level, int wleft){
    // pruning
    // base case
    if(level==n){
        return 0;
    }
    // cashe check
    if(dp[level][wleft] != -1){
        return dp[level][wleft];
    }
    // transition
    int ans = rec(level+1,wleft);
    if(w[level]<= wleft){
        ans = max(ans, rec(level+1,wleft-w[level])+v[level]);
    }
    // save and return 
    return dp[level][wleft] = ans;
}

vector<int> solution;
void generate(int level, int wleft){
    if(level==n){
        return;
    }
    else{
        int donttake = rec(level+1,wleft);
        if(w[level]<=wleft){
            // can posibaly take
            int take = rec(level+1,wleft-w[level])+v[level];
            if(donttake>take){
                generate(level+1,wleft);
            }
            else{
                solution.push_back(level);
                generate(level+1,wleft-w[level]);
            }
        }
        else{
            generate(level+1,wleft);
        }
    }
}

void solve(){
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>w[i];
    }
    for(int i=0;i<n;i++){
        cin>>v[i];
    }
    cin>>W;
    memset(dp,-1,sizeof(dp));
    cout<<rec(0,W)<<'\n';
    generate(0,W);
    cout<<solution.size()<<endl;
    for(auto v:solution){
        cout<<v<<" ";
    }
    cout<<endl;
}

int main(){
    solve();
}



///////////////////////  code for the  max k item that we can take and sum of the weight of the item taken should be divisible by M  //////////////////

#include<bits/stdc++.h>
using namespace std;
cont int INF = 1e9;

int n;
int w[3000];
int v[3000];
int W,K,M;
int dp[101][101][101];

int rec(int level, int wleft, int item_left){
    // pruning
    // base case
    if(level==n){
        int sum_of_taken = W-wleft;
        if(sum_of_taken%M==0){     // this is valid
            return 0;
        }
        else{                     // this is invalid
            return -INF;
        }
    }
    // cashe check
    if(dp[level][wleft][item_left] != -1){
        return dp[level][wleft][item_left];
    }
    // transition
    int ans = rec(level+1,wleft,item_left);
    if(w[i]<= wleft && item_left>0){
        ans = max(ans,rec(level,wleft-w[level],item_left-1)+v[level]);
    }
    // save and return 
    return dp[level][wleft][item_left] = ans;
}

void solve(){
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>w[i];
    }
    for(int i=0;i<n;i++){
        cin>>v[i];
    }
    cin>>W>>K>>M;
    memset(dp,-1,sizeof(dp));
    cout<<rec(0,W,k)<<'\n';
}

int main(){
    solve();
}
