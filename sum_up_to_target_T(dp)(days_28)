#include<bits/stdc++.h>
using namespace std;

int n,t;
int x[101];
int dp[101][10100];

int rec(int level, int sum_taken){
    // pruning
    if(sum_taken>t){
        return 0;
    }
    // base case
    if(level==n+1){
        if(sum_taken==t){
            return 1;
            }
            else{
                return 0; 
            }
        }
    // cashe check
    if(dp[level][sum_taken] != -1){
        return dp[level][sum_taken];
    }
    // transition
    int ans = 0;
    if(rec(level+1,sum_taken)==1){
        ans = 1;
    }
    else if(rec(level+1,sum_taken+x[level])==1){
        ans = 1;
    }
    // save and return 
    return dp[level][sum_taken] = ans;
}

void solve(){
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>x[i];
    }
    cin>>t;
    memset(dp,-1,sizeof(dp));
    cout<<rec(1,0)<<'\n';
}

int main(){
    solve();
}




/////////////////////////////////           this code handle the query also            //////////////////////////////////////////

#include<bits/stdc++.h>
using namespace std;

int n,t;
int x[101];
int dp[101][10100];

int rec(int level, int sum_left){
    // pruning
    if(sum_left<0){
        return 0;
    }
    // base case
    if(level==n+1){
        if(sum_left==0){
            return 1;
            }
            else{
                return 0; 
            }
        }
    // cashe check
    if(dp[level][sum_left] != -1){
        return dp[level][sum_left];
    }
    // transition
    int ans = 0;
    if(rec(level+1,sum_left)==1){
        ans = 1;
    }
    else if(rec(level+1,sum_left-x[level])==1){
        ans = 1;
    }
    // save and return 
    return dp[level][sum_left] = ans;
}

void solve(){
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>x[i];
    }
    memset(dp,-1,sizeof(dp));
    int q; cin>>q;
    while(q--){
        cin>>t;
        cout<<rec(1,t)<<'\n';
    }
}

int main(){
    solve();
}


////////////////////////////  printing part of the above solution   ////////////////////////////////////



#include<bits/stdc++.h>
using namespace std;

int n,t;
int x[101];
int dp[101][10100];

int rec(int level, int sum_left){
    // pruning
    if(sum_left<0){
        return 0;
    }
    // base case
    if(level==n+1){
        if(sum_left==0){
            return 1;
            }
            else{
                return 0; 
            }
        }
    // cashe check
    if(dp[level][sum_left] != -1){
        return dp[level][sum_left];
    }
    // transition
    int ans = 0;
    if(rec(level+1,sum_left)==1){
        ans = 1;
    }
    else if(rec(level+1,sum_left-x[level])==1){
        ans = 1;
    }
    // save and return 
    return dp[level][sum_left] = ans;
}

vector<int> solution ;
void printset(int level, int sum_left){
    // base cases
    if(level==n+1)return;
    
    if(rec(level+1,sum_left)==1){        // this is dont take part so leave as it is
        printset(level+1,sum_left);
    }
    else if(rec(level+1,sum_left-x[level])==1){
        solution.push_back(x[level]);
        printset(level+1,sum_left-x[level]);
    }
}

void solve(){
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>x[i];
    }
    memset(dp,-1,sizeof(dp));
    int q; cin>>q;
    while(q--){
        cin>>t;
        if(rec(1,t)){
            printset(1,t);
            for(auto v : solution){
                cout << v << " ";
            }
            cout<<endl;
            solution.clear();
        }
        else{
            cout<<"no solution exist for this target try another one"<<endl;
        }
    }
}

int main(){
    solve();
}
