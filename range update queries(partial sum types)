#include <bits/stdc++.h>
using namespace std;

int n,q;
int arr[10010];

struct node{
    int sum;
    node(){
        sum = 0;
    }
};

node merge(node a, node b){
    node ans;
    ans.sum = a.sum + b.sum;
    return ans;
}
node t[40040];

// Build segment tree
void build(int index, int L, int R){
    if (L == R) {
        t[index].sum = 0;
        return;
    }
    int mid = (L + R) / 2;
    build(index * 2, L, mid);
    build(index * 2 + 1, mid + 1, R);
    t[index] = merge(t[index*2],t[index*2+1]);
}

void update(int index, int L, int R, int pos, int val){
    if (pos < L || pos > R) return;
    if (L == R) {
        t[index].sum = val;
        return;
    }
    int mid = (L + R) / 2;
    update(index * 2, L, mid, pos, val);
    update(index * 2 + 1, mid + 1, R, pos, val);
    t[index] = merge(t[index*2],t[index*2+1]); 
}

// Range sum query from `l` to `r`
node sum_query(int index, int L, int R, int l, int r){
    if (r < L || l > R) return node(); // completely outside
    if (l <= L && R <= r) return t[index]; // completely inside

    int mid = (L + R) / 2;
    return merge(sum_query(index*2,L,mid,l,r),sum_query(index*2+1,mid+1,R,l,r));
}

void solve(){
    cin >> n>>q;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    build(1, 0, n - 1);

    while (q--) {
        int ch;
        cin >> ch;
        if (ch == 1) {
            int a,b,u;
            cin>>a>>b>>u;
            a--; b--;
            update(1,0,n-1,a,u);
            update(1,0,n-1,b+1,-u);
        } else {
            int k;
            cin>>k;
            k--;
            node ans = sum_query(1,0,n-1,0,k);
            cout<<ans.sum+arr[k]<<endl;
        }
    }
}

int main(){
    solve();
    return 0;
}
