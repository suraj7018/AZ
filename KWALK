Description
You are given an 
N
×
N
N×N chessboard and a knight with starting position 
(
S
x
,
S
y
)
(Sx,Sy). You are given a final position 
(
F
x
,
F
y
)
(Fx,Fy). You have to find the minimum number of moves required to reach the final position.

Complete the function:

int KnightWalk(int N, int Sx, int Sy, int Fx, int Fy);
Input Format
The first line contains a single integer T - the number of test cases.
The first line of each test case contains five integers N Sx Sy Fx Fy - the size of the board, initial position and final position.

Output Format
For every test case print the minimum number of moves required. If it is not possible print -1.

Constraints
1 ≤ T ≤ 20
1 ≤ N ≤ 1000
1 ≤ Sx, Sy, Fx, Fy ≤ N

Sample Input 1
3
6 4 5 1 1
6 3 3 6 6
6 6 1 1 6
Sample Output 1
3
2
4
Note
The situation described in test case 1 is:

//////////////////////////   code   ////////////////////////////


#include <bits/stdc++.h>
using namespace std;

int dx[] = {2, 2, -2, -2, 1, -1, 1, -1};
int dy[] = {1, -1, 1, -1, 2, 2, -2, -2};

int KnightWalk(int N, int Sx, int Sy, int Fx, int Fy) {
    // Convert 1-based to 0-based indexing
    Sx--; Sy--; Fx--; Fy--;
    if (Sx == Fx && Sy == Fy){
		return 0;
	}

    vector<vector<int>> visited(N, vector<int>(N, 0));
    queue<pair<int, int>> q;

	visited[Sx][Sy] = 1;
    q.push({Sx, Sy});
    while (!q.empty()) {
        auto [x, y] = q.front();
        int moves = visited[x][y];
        q.pop();

        for (int d = 0; d < 8; d++) {
            int nx = x + dx[d];
            int ny = y + dy[d];

            if (nx >= 0 && ny >= 0 && nx < N && ny < N && !visited[nx][ny]) {
                if (nx == Fx && ny == Fy) return moves;
                visited[nx][ny] = moves + 1;
                q.push({nx, ny});
            }
        }
    }
    return -1;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);

	int test_case;
	cin >> test_case;
	while (test_case--)
	{
		int N, Sx, Sy, Fx, Fy;
		cin >> N >> Sx >> Sy >> Fx >> Fy;
		cout << KnightWalk(N, Sx, Sy, Fx, Fy) << "\n";
	}
}
