#include <bits/stdc++.h>
using namespace std;
#define int long long
const int MOD = 1e9 + 7;

void solve(){
    int n;
    string s;
    cin >> s;
    n = s.length();

    vector<int> dp(n + 1);
    vector<int> prefixsum(n + 1);  // Still used for consistency
    vector<int> last(26, -1);

    dp[0] = 1;
    prefixsum[0] = 1;

    for(int i = 1; i <= n; i++){
        dp[i] = (2 * dp[i - 1]) % MOD;
        if(last[s[i - 1] - 'a'] != -1){
            int idx = last[s[i - 1] - 'a'];
            dp[i] = (dp[i] - dp[idx] + MOD) % MOD;  // Add MOD to avoid negative
        }
        last[s[i - 1] - 'a'] = i - 1;
        prefixsum[i] = dp[i];
    }

    cout << (dp[n] - 1 + MOD) % MOD << endl;  // Exclude empty subsequence
}

signed main(){
    solve();
}
